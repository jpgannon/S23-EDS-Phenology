phenophase_description == input$phenophase_description2
)
})
selected_species3 <- reactive({
cdfa %>%
filter(common_name == input$common_name3,
year == input$year3,
phenophase_description == input$phenophase_description3
)
})
selected_ElevTS <- reactive({
icdf2 %>%
filter(
common_name == input$common_nameEB,
# day_of_year < input$DOY
)
})
selected_status <- reactive({
cdf2 %>%
filter(
common_name == input$common_name,
phenophase_description == input$phenophase_description,
#elev_bands == input$elev_bands,
day_of_year < input$DOY
)
})
# fl_calendar <- reactive({
#   falling_leaves %>%
#     filter(
#       common_name == input$common_name,
#       year == input$year,
#       day_of_year == day_of_year
#     )
# })
selected_intensity <- reactive({
icdf2 %>%
filter(
common_name == input$common_name2,
#elev_bands == input$elev_bands2,
day_of_year < input$DOY2
)
})
selected_tab4 <- reactive({
bivar_weather %>%
filter(
site_name == input$site_name_bivar,
common_name %in% input$common_name_bivar
) %>%
select(common_name, site_name, input$weather_condition,
year, day_of_year
)
})
#select input for tab3
selected_timeSeries <- reactive({
bivar_weather %>%
filter(
common_name %in% input$common_name4,
elev_bands == input$elev_bands2,
)
})
#########
##########################################
## OUTPUT PLOT 1: status / quick glance ##
status_colors <- c("blue", "goldenrod")
status_labels <- c("Not Observed", "Observed")
output$plot1 <- renderPlot({
ggplot(selected_species(), aes(x=day_of_year, y=elev_bands,fill = y)) +
geom_point(pch = 22, size = 6) +
geom_vline(xintercept = c(79, 172, 265, 355), xlim(NA, 365), color = 'black') +
labs(title = paste(input$phenophase_description, "of", input$common_name, "in", input$year),
x = "Day of Year", y = "Elevation Band", fill = "Phenophase Status",
caption = "Each vertical line indicates the start of a new season") +
scale_color_manual(name="Phenophase Status", values=status_colors) +
scale_fill_manual(name="Phenophase Status", values=status_colors, labels=status_labels) +
scale_x_continuous(breaks = seq(0, 365, 30)) +
theme_classic() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 28, face = "bold"),
plot.caption = element_text(size = 14))
})
output$plot1a <- renderPlot({
req(input$show_second_plot)
if(input$show_second_plot) {
ggplot(selected_species2(), aes(x=day_of_year, y=elev_bands,fill = y)) +
geom_point(pch = 22, size = 6) +
geom_vline(xintercept = c(79, 172, 265, 355), xlim(NA, 365), color = 'black') +
labs(title = paste(input$phenophase_description2, "of", input$common_name2, "in", input$year2),
x = "Day of Year", y = "Elevation Band", fill = "Phenophase Status",
caption = "Each vertical line indicates the start of a new season") +
scale_color_manual(name="Phenophase Status", values=status_colors) +
scale_fill_manual(name="Phenophase Status", values=status_colors, labels=status_labels) +
scale_x_continuous(breaks = seq(0, 365, 30)) +
theme_classic() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 28, face = "bold"),
plot.caption = element_text(size = 14))
}
})
output$plot1b <- renderPlot({
req(input$show_third_plot)
if(input$show_third_plot) {
ggplot(selected_species3(), aes(x=day_of_year, y=elev_bands,fill = y)) +
geom_point(pch = 22, size = 6) +
geom_vline(xintercept = c(79, 172, 265, 355), xlim(NA, 365), color = 'black') +
labs(title = paste(input$phenophase_description3, "of", input$common_name3, "in", input$year3),
x = "Day of Year", y = "Elevation Band", fill = "Phenophase Status",
caption = "Each vertical line indicates the start of a new season") +
scale_color_manual(name="Phenophase Status", values=status_colors) +
scale_fill_manual(name="Phenophase Status", values=status_colors, labels=status_labels) +
scale_x_continuous(breaks = seq(0, 365, 30)) +
theme_classic() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 28, face = "bold"),
plot.caption = element_text(size = 14))
}
})
################################
## OUTPUT PLOT 2: time series ##
elev_colors <- c("blue", "goldenrod", "black")
output$plot2 <- renderPlot({
ggplot(selected_ElevTS(), aes(x=year, y=day_of_year, color=elev_bands, fill = elev_bands)) +
geom_point(pch = 21, size = 6) +
geom_smooth(method=lm, se=FALSE) +
scale_color_manual(values = elev_colors) +
scale_fill_manual(values = elev_colors) +
scale_x_continuous(breaks = unique(selected_ElevTS()$year), labels = unique(selected_ElevTS()$year)) +
labs(title = paste("First leaf out of", input$common_name3, "by elevation band"),
x = "Year", y = "Day of Year", fill = "Elevation Bands") +
theme_classic() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 28, face = "bold")) +
guides(color = FALSE)
})
###################
## OUTPUT PLOT 3 ##
output$plot3 <- renderPlot({
ggplot(selected_timeSeries(), aes(x = year, y = day_of_year)) +
geom_point(aes(color = common_name), pch = 21, size = 6) +
geom_smooth(method=lm, se=FALSE) +
labs(title = paste("First leaf out of", input$common_name4, "at elevation band", input$elev_bands2),
x = "Year", y = "Day of Year")+
theme_classic() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 28, face = "bold"))
})
###################
## OUTPUT PLOT 4 ##
categories1 <- c("blue", "goldenrod", "black", "red","darkorange", "yellow", "green", "cyan", "purple", "magenta", "pink")
output$plot4 <- renderPlot({
ggplot(selected_tab4(), aes(x= year, y=day_of_year, shape = common_name)) +
# x=tmin_spring
# x=input$weather_condition
geom_point(aes(color = as.factor(year)), size = 6) +
geom_point(colour = "grey90", size = 1.5) +
geom_smooth(method=lm, se=FALSE) +
scale_color_manual(values = categories1) +
scale_fill_manual(values = categories1) +
ggtitle(paste(input$common_name_bivar, "first leaf out vs. min. spring temperature,", input$year_bivar)) +
xlab("Minimum spring temperature (C)") +
ylab(paste("first leaf out DOY for", input$common_name_bivar)) +
labs(subtitle = "*need to reassess data subset...") +
theme_classic() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 20, face = "bold"))
},
height = 600, width = 800)
=======
ggtitle(paste(input$common_name_bivar, "first leaf out vs. min. spring temperature", input$year_bivar)) +
## make vs. [variable] adapt to selection...
xlab(expression('Minimum Spring Temperature ('*~degree*C*')')) +
## make [variable] adapt to selection...
ylab(paste("first leaf out DOY for", input$common_name_bivar)) +
#labs(subtitle = "*need to reassess data subset...") +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 16, face = "bold"),
plot.title = element_text(size = 20, face = "bold"))
})
>>>>>>> c56755e7b43091d16cf37b535216de8b8fa0cbf4
############################
## light mode / dark mode ##
observe({
# Make sure theme is kept current with desired
session$setCurrentTheme(
bs_theme_update(my_theme, bootswatch = input$current_theme)
)
})
}
thematic_shiny()
thematic_on()
#thematic_rmd()
shinyApp(ui = ui, server = server)
runApp()
View(bivar_weather)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('app')
<<<<<<< HEAD
setwd("C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone/S23-EDS-Phenology/app")
git config --global user.email "jnhalvis@vt.edu"
ggplot(selected_ElevTS(), aes(x=year, y=day_of_year, color=elev_bands, fill = elev_bands)) +
geom_point(pch = 21, size = 6) +
geom_smooth(method=lm, se=FALSE) +
scale_color_manual(values = elev_colors) +
scale_fill_manual(values = elev_colors) +
scale_x_continuous(breaks = unique(selected_ElevTS()$year), labels = unique(selected_ElevTS()$year)) +
labs(title = paste("First leaf out of", input$common_name3, "by elevation band"),
x = "Year", y = "Day of Year", fill = "Elevation Bands") +
theme_classic() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 20, face = "bold"),
plot.title = element_text(size = 28, face = "bold")) +
guides(color = FALSE)
=======
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(DT)
runApp('app')
>>>>>>> c56755e7b43091d16cf37b535216de8b8fa0cbf4
shiny::runApp('app')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('app')
runApp('app')
install.packages("remotes")
remotes::install_github("bcgov/ggpp")
remotes::install_github("bcgov/ggpp")
remotes::install_github("clauswilke/ggpp")
runApp('app')
install.packages("ggpmisc")
runApp('app')
runApp('app')
install.packages("dplyr")
install.packages("dplyr")
shiny::runApp('app')
runApp('app')
pak::pak("tidyverse/dplyr")
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
view(selected_ElevTS)
view(selected_ElevTS())
view(icdf2)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
missing_data <- subset(cdfa, !(paste(common_name, phenophase_description, year) %in% paste(filtered_data$common_name, filtered_data$phenophase_description, filtered_data$year)))
missing_data <- subset(cdfa, !(paste(common_name, phenophase_description, year) %in% paste(filtered_data$common_name, filtered_data$phenophase_description, filtered_data$year)))
if (nrow(missing_data) > 0) {
cat("Warning: The following combinations have no data:\n")
print(missing_data)
}
filtered_data <- cdfa %>%
group_by(common_name, phenophase_description, year) %>%
summarize(n = n()) %>%
filter(n > 0) %>%
select(-n)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
setwd("C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone")
library(readr)
cdf <- read_csv("cdf.csv")
View(cdf)
View(cdf)
icdf <- subset(cdf,
intensity_value == '95% or more' & phenophase_description == 'Leaves',
select = c(species_id, phenophase_id, common_name, phenophase_description, intensity_value, site_name,
elevation_in_meters, elev_bands, tmin_winter, tmin_spring, tmax_winter,
tmax_spring, daylength,individual_id, year, day_of_year))
View(cdf)
cdf=cdf %>%
dplyr::mutate(year = lubridate::year(observation_date),
month = lubridate::month(observation_date),
day = lubridate::day(observation_date))
cdf$elev_bands <- cut(cdf$elevation_in_meters, c(-Inf,800,1300,Inf), c("<800m", "800-1300m", ">1300m"))
icdf <- subset(cdf,
intensity_value == '95% or more' & phenophase_description == 'Leaves',
select = c(species_id, phenophase_id, common_name, phenophase_description, intensity_value, site_name,
elevation_in_meters, elev_bands, tmin_winter, tmin_spring, tmax_winter,
tmax_spring, daylength,individual_id, year, day_of_year))
View(icdf)
View(cdf)
View(cdf)
icdf <- subset(cdf,
intensity_value == '95% or more' & phenophase_description == c('Leaves', 'Breaking leaf buds', '
All leaves fallen (deciduous)'),
select = c(species_id, phenophase_id, common_name, phenophase_description, intensity_value, site_name,
elevation_in_meters, elev_bands, tmin_winter, tmin_spring, tmax_winter,
tmax_spring, daylength,individual_id, year, day_of_year))
View(icdf)
cdf <- subset(cdf, phenophase_description %in% c('Leaves', 'Breaking leaf buds', '
All leaves fallen (deciduous)'))
View(cdf)
View(cdf)
cdf=cdf %>%
dplyr::mutate(year = lubridate::year(observation_date),
month = lubridate::month(observation_date),
day = lubridate::day(observation_date))
cdf <- read_csv("cdf.csv")
View(cdf)
cdf=cdf %>%
dplyr::mutate(year = lubridate::year(observation_date),
month = lubridate::month(observation_date),
day = lubridate::day(observation_date))
cdf$elev_bands <- cut(cdf$elevation_in_meters, c(-Inf,800,1300,Inf), c("<800m", "800-1300m", ">1300m"))
cdf <- subset(cdf, phenophase_description %in% c('Leaves', 'Breaking leaf buds', '
All leaves colored (deciduous)'))
View(cdf)
cdf=cdf %>%
dplyr::mutate(year = lubridate::year(observation_date),
month = lubridate::month(observation_date),
day = lubridate::day(observation_date))
cdf$elev_bands <- cut(cdf$elevation_in_meters, c(-Inf,800,1300,Inf), c("<800m", "800-1300m", ">1300m"))
cdf <- subset(cdf, phenophase_description %in% c('Leaves', 'Breaking leaf buds', '
All leaves colored (deciduous)'))
View(cdf)
View(cdf)
icdf <- subset(cdf,
intensity_value == '95% or more',
select = c(species_id, phenophase_id, common_name, phenophase_description, intensity_value, site_name,
elevation_in_meters, elev_bands, tmin_winter, tmin_spring, tmax_winter,
tmax_spring, daylength,individual_id, year, day_of_year))
View(icdf)
cdf <- read_csv("cdf.csv")
View(cdf)
cdf=cdf %>%
dplyr::mutate(year = lubridate::year(observation_date),
month = lubridate::month(observation_date),
day = lubridate::day(observation_date))
cdf$elev_bands <- cut(cdf$elevation_in_meters, c(-Inf,800,1300,Inf), c("<800m", "800-1300m", ">1300m"))
cdf <- subset(cdf, phenophase_description %in% c('Leaves', 'Breaking leaf buds', '
All leaves colored (deciduous)'))
icdf <- subset(cdf,
phenophase_status == '1',
select = c(species_id, phenophase_id, common_name, phenophase_description, intensity_value, site_name,
elevation_in_meters, elev_bands, tmin_winter, tmin_spring, tmax_winter,
tmax_spring, daylength,individual_id, year, day_of_year))
View(icdf)
icdf2 <- icdf %>%
group_by(year, individual_id, common_name) %>%
filter(day_of_year == min(day_of_year))
View(icdf2)
icdfE <- icdf2
write.csv(icdfE)
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone")
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School/2022_23/Spring23")
setwd("C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone")
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone")
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone")
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School")
setwd("C:/Users/Jason Halvis/Documents/School/2022_23")
setwd("C:/Users/Jason Halvis/Documents/School")
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School")
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School", row.names = FALSE)
write.csv(icdfE.csv, "C:/Users/Jason Halvis/Documents/School", row.names = FALSE)
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School", row.names = FALSE)
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School/icdfE.csv", row.names = FALSE)
setwd("C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone/S23-EDS-Phenology/app")
icdfE <- read.csv("www/data/icdfE.csv")
icdfE <- read.csv("www/data/icdfE.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone")
library(readr)
cdf <- read_csv("cdf.csv")
View(cdf)
cdf=cdf %>%
dplyr::mutate(year = lubridate::year(observation_date),
month = lubridate::month(observation_date),
day = lubridate::day(observation_date))
cdf$elev_bands <- cut(cdf$elevation_in_meters, c(-Inf,800,1300,Inf), c("<800m", "800-1300m", ">1300m"))
View(cdf)
cdf <- subset(cdf, phenophase_description %in% c("Leaves", "Breaking leaf buds", "All leaves colored (deciduous)"))
View(cdf)
icdf <- subset(cdf,
intensity_value == '95% or more'
select = c(species_id, phenophase_id, common_name, phenophase_description, intensity_value, site_name,
icdf <- subset(cdf,
intensity_value == '95% or more',
select = c(species_id, phenophase_id, common_name, phenophase_description, intensity_value, site_name,
elevation_in_meters, elev_bands, tmin_winter, tmin_spring, tmax_winter,
tmax_spring, daylength,individual_id, year, day_of_year))
View(icdf)
cdf <- subset(cdf, phenophase_description %in% c("Leaves", "Breaking leaf buds", "All leaves colored (deciduous)"))
library(readr)
cdf <- read_csv("cdf.csv")
View(cdf)
cdf=cdf %>%
dplyr::mutate(year = lubridate::year(observation_date),
month = lubridate::month(observation_date),
day = lubridate::day(observation_date))
cdf$elev_bands <- cut(cdf$elevation_in_meters, c(-Inf,800,1300,Inf), c("<800m", "800-1300m", ">1300m"))
cdf <- subset(cdf, phenophase_description %in% c("Leaves", "Breaking leaf buds", "All leaves colored (deciduous)"))
icdf <- subset(cdf,
select = c(species_id, phenophase_id, common_name, phenophase_description, intensity_value, site_name,
elevation_in_meters, elev_bands, tmin_winter, tmin_spring, tmax_winter,
tmax_spring, daylength,individual_id, year, day_of_year))
icdfE <- icdf %>%
group_by(year, individual_id, common_name) %>%
filter(day_of_year == min(day_of_year))
View(icdfE)
setwd("C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone")
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School2022_23/Spring23/Capstone/icdfE.csv", row.names = FALSE)
setwd("C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone")
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School2022_23/Spring23/Capstone/icdfE.csv", row.names = FALSE)
setwd("C:/Users/Jason Halvis/Documents/School")
write.csv(icdfE, "C:/Users/Jason Halvis/Documents/School/icdfE.csv", row.names = FALSE)
setwd("C:/Users/Jason Halvis/Documents/School/2022_23/Spring23/Capstone/S23-EDS-Phenology/app")
runApp()
runApp()
runApp()
library(ggpmisc)
runApp()
runApp()
